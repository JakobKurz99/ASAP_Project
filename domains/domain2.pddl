(define (domain GridPlanning)
  (:requirements :strips :typing)
  (:types robot object grid_box)
  (:predicates
    (right_of ?x - grid_box ?y - grid_box)
    (left_of ?x - grid_box ?y - grid_box)
    (up_of ?x - grid_box ?y - grid_box)
    (down_of ?x - grid_box ?y - grid_box)
    (robot_at ?r - robot ?y - grid_box)
    (object_at ?obj - object ?y - grid_box)
    (free ?r - robot)
    (holding ?r - robot ?obj - object)
    (accessible ?cell - grid_box) ; Neues Prädikat für zugängliche Felder
  )
  (:action move_right
    :parameters (?r - robot ?from - grid_box ?to - grid_box)
    :precondition (and (robot_at ?r ?from) (right_of ?from ?to) (free ?r) (accessible ?to))
    :effect (and (not (robot_at ?r ?from)) (robot_at ?r ?to))
  )
  (:action move_left
    :parameters (?r - robot ?from - grid_box ?to - grid_box)
    :precondition (and (robot_at ?r ?from) (left_of ?from ?to) (free ?r) (accessible ?to))
    :effect (and (not (robot_at ?r ?from)) (robot_at ?r ?to))
  )
  (:action move_up
    :parameters (?r - robot ?from - grid_box ?to - grid_box)
    :precondition (and (robot_at ?r ?from) (up_of ?from ?to) (free ?r) (accessible ?to))
    :effect (and (not (robot_at ?r ?from)) (robot_at ?r ?to))
  )
  (:action move_down
    :parameters (?r - robot ?from - grid_box ?to - grid_box)
    :precondition (and (robot_at ?r ?from) (down_of ?from ?to) (free ?r) (accessible ?to))
    :effect (and (not (robot_at ?r ?from)) (robot_at ?r ?to))
  )
)
